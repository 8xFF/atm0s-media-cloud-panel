// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String             @unique
  emailVerified    DateTime?          @map("email_verified")
  image            String?
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  Account          Account[]
  Session          Session[]
  ProjectMembers   ProjectMembers[]
  ProjectAccessKey ProjectAccessKey[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime @map("expires")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Projects {
  id                   String                 @id @default(cuid())
  owner                String
  name                 String
  options              Json
  codecs               Json
  projectUrl           String                 @map("project_url")
  sipUri               String                 @map("sip_uri")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  ProjectMembers       ProjectMembers[]
  ProjectAccessKey     ProjectAccessKey[]
  ProjectMemberInvites ProjectMemberInvites[]
}

model ProjectMembers {
  id        Int    @id @default(autoincrement())
  projectId String @map("project_id")
  userId    String @map("user_id")
  role      String

  project Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProjectMemberInvites {
  id        String @id @default(cuid())
  projectId String @map("project_id")
  email     String
  role      String
  expireAt  BigInt @default(0)

  project Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectAccessKey {
  id        Int      @id @default(autoincrement())
  projectId String   @map("project_id")
  apiKey    String   @map("api_key")
  secretKey String   @map("secret_key")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  project Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
